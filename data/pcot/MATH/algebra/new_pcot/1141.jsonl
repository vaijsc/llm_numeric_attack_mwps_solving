"# Define the sum of the digits in both John and his father's age\nsum_of_digits = 6  ### condition: 'sum_of_digits': {'type': 'int', '<=': None, '>=': 0, 'science_constant': False, 'direct_from_question': True}\n# Calculate the possible two-digit ages for John\njohn_age_tens = 1  ### condition: 'john_age_tens': {'type': 'int', '<=': 9, '>=': 1, 'science_constant': False, 'direct_from_question': True}\njohn_age_units = sum_of_digits - john_age_tens  ### condition: 'john_age_units': {'type': 'int', '<=': 9, '>=': 0, 'science_constant': False, 'direct_from_question': False}\n# Calculate John's age\njohn_age = john_age_tens * 10 + john_age_units  ### condition: 'john_age': {'type': 'int', '<=': 99, '>=': 10, 'science_constant': False, 'direct_from_question': False}\n# Reverse the digits to find John's father's age\nfather_age = john_age_units * 10 + john_age_tens  ### condition: 'father_age': {'type': 'int', '<=': 99, '>=': 10, 'science_constant': False, 'direct_from_question': False}\n# Assert the positive difference between their ages is 27\nassert abs(father_age - john_age) == 27, \"The positive difference between their ages is not 27.\"\n# Print John's father's age\nprint(f\"John's father's age: {father_age}\")"
"# Define the sum of the digits in both John and his father's age\nsum_of_digits = 7  ### condition: 'sum_of_digits': {'type': 'int', '<=': None, '>=': 0, 'science_constant': False, 'direct_from_question': True}\n# Calculate the possible two-digit ages for John\njohn_age_tens = 1  ### condition: 'john_age_tens': {'type': 'int', '<=': 9, '>=': 1, 'science_constant': False, 'direct_from_question': True}\njohn_age_units = sum_of_digits - john_age_tens  ### condition: 'john_age_units': {'type': 'int', '<=': 9, '>=': 0, 'science_constant': False, 'direct_from_question': False}\n# Calculate John's age\njohn_age = john_age_tens * 10 + john_age_units  ### condition: 'john_age': {'type': 'int', '<=': 99, '>=': 10, 'science_constant': False, 'direct_from_question': False}\n# Reverse the digits to find John's father's age\nfather_age = john_age_units * 10 + john_age_tens  ### condition: 'father_age': {'type': 'int', '<=': 99, '>=': 10, 'science_constant': False, 'direct_from_question': False}\n# Assert the positive difference between their ages is 27\nassert abs(father_age - john_age) == 27, \"The positive difference between their ages is not 27.\"\n# Print John's father's age\nprint(f\"John's father's age: {father_age}\")"
"# Define the sum of the digits in both John and his father's age\nsum_of_digits = 8  ### condition: 'sum_of_digits': {'type': 'int', '<=': None, '>=': 0, 'science_constant': False, 'direct_from_question': True}\n# Calculate the possible two-digit ages for John\njohn_age_tens = 1  ### condition: 'john_age_tens': {'type': 'int', '<=': 9, '>=': 1, 'science_constant': False, 'direct_from_question': True}\njohn_age_units = sum_of_digits - john_age_tens  ### condition: 'john_age_units': {'type': 'int', '<=': 9, '>=': 0, 'science_constant': False, 'direct_from_question': False}\n# Calculate John's age\njohn_age = john_age_tens * 10 + john_age_units  ### condition: 'john_age': {'type': 'int', '<=': 99, '>=': 10, 'science_constant': False, 'direct_from_question': False}\n# Reverse the digits to find John's father's age\nfather_age = john_age_units * 10 + john_age_tens  ### condition: 'father_age': {'type': 'int', '<=': 99, '>=': 10, 'science_constant': False, 'direct_from_question': False}\n# Assert the positive difference between their ages is 27\nassert abs(father_age - john_age) == 27, \"The positive difference between their ages is not 27.\"\n# Print John's father's age\nprint(f\"John's father's age: {father_age}\")"
"# Define the sum of the digits in both John and his father's age\nsum_of_digits = 9  ### condition: 'sum_of_digits': {'type': 'int', '<=': None, '>=': 0, 'science_constant': False, 'direct_from_question': True}\n# Calculate the possible two-digit ages for John\njohn_age_tens = 1  ### condition: 'john_age_tens': {'type': 'int', '<=': 9, '>=': 1, 'science_constant': False, 'direct_from_question': True}\njohn_age_units = sum_of_digits - john_age_tens  ### condition: 'john_age_units': {'type': 'int', '<=': 9, '>=': 0, 'science_constant': False, 'direct_from_question': False}\n# Calculate John's age\njohn_age = john_age_tens * 10 + john_age_units  ### condition: 'john_age': {'type': 'int', '<=': 99, '>=': 10, 'science_constant': False, 'direct_from_question': False}\n# Reverse the digits to find John's father's age\nfather_age = john_age_units * 10 + john_age_tens  ### condition: 'father_age': {'type': 'int', '<=': 99, '>=': 10, 'science_constant': False, 'direct_from_question': False}\n# Assert the positive difference between their ages is 27\nassert abs(father_age - john_age) == 27, \"The positive difference between their ages is not 27.\"\n# Print John's father's age\nprint(f\"John's father's age: {father_age}\")"
"# Define the sum of the digits in both John and his father's age\nsum_of_digits = 5  ### condition: 'sum_of_digits': {'type': 'int', '<=': None, '>=': 0, 'science_constant': False, 'direct_from_question': True}\n# Calculate the possible two-digit ages for John\njohn_age_tens = 2  ### condition: 'john_age_tens': {'type': 'int', '<=': 9, '>=': 1, 'science_constant': False, 'direct_from_question': True}\njohn_age_units = sum_of_digits - john_age_tens  ### condition: 'john_age_units': {'type': 'int', '<=': 9, '>=': 0, 'science_constant': False, 'direct_from_question': False}\n# Calculate John's age\njohn_age = john_age_tens * 10 + john_age_units  ### condition: 'john_age': {'type': 'int', '<=': 99, '>=': 10, 'science_constant': False, 'direct_from_question': False}\n# Reverse the digits to find John's father's age\nfather_age = john_age_units * 10 + john_age_tens  ### condition: 'father_age': {'type': 'int', '<=': 99, '>=': 10, 'science_constant': False, 'direct_from_question': False}\n# Assert the positive difference between their ages is 27\nassert abs(father_age - john_age) == 27, \"The positive difference between their ages is not 27.\"\n# Print John's father's age\nprint(f\"John's father's age: {father_age}\")"
"# Define the sum of the digits in both John and his father's age\nsum_of_digits = 5  ### condition: 'sum_of_digits': {'type': 'int', '<=': None, '>=': 0, 'science_constant': False, 'direct_from_question': True}\n# Calculate the possible two-digit ages for John\njohn_age_tens = 3  ### condition: 'john_age_tens': {'type': 'int', '<=': 9, '>=': 1, 'science_constant': False, 'direct_from_question': True}\njohn_age_units = sum_of_digits - john_age_tens  ### condition: 'john_age_units': {'type': 'int', '<=': 9, '>=': 0, 'science_constant': False, 'direct_from_question': False}\n# Calculate John's age\njohn_age = john_age_tens * 10 + john_age_units  ### condition: 'john_age': {'type': 'int', '<=': 99, '>=': 10, 'science_constant': False, 'direct_from_question': False}\n# Reverse the digits to find John's father's age\nfather_age = john_age_units * 10 + john_age_tens  ### condition: 'father_age': {'type': 'int', '<=': 99, '>=': 10, 'science_constant': False, 'direct_from_question': False}\n# Assert the positive difference between their ages is 27\nassert abs(father_age - john_age) == 27, \"The positive difference between their ages is not 27.\"\n# Print John's father's age\nprint(f\"John's father's age: {father_age}\")"
"# Define the sum of the digits in both John and his father's age\nsum_of_digits = 5  ### condition: 'sum_of_digits': {'type': 'int', '<=': None, '>=': 0, 'science_constant': False, 'direct_from_question': True}\n# Calculate the possible two-digit ages for John\njohn_age_tens = 4  ### condition: 'john_age_tens': {'type': 'int', '<=': 9, '>=': 1, 'science_constant': False, 'direct_from_question': True}\njohn_age_units = sum_of_digits - john_age_tens  ### condition: 'john_age_units': {'type': 'int', '<=': 9, '>=': 0, 'science_constant': False, 'direct_from_question': False}\n# Calculate John's age\njohn_age = john_age_tens * 10 + john_age_units  ### condition: 'john_age': {'type': 'int', '<=': 99, '>=': 10, 'science_constant': False, 'direct_from_question': False}\n# Reverse the digits to find John's father's age\nfather_age = john_age_units * 10 + john_age_tens  ### condition: 'father_age': {'type': 'int', '<=': 99, '>=': 10, 'science_constant': False, 'direct_from_question': False}\n# Assert the positive difference between their ages is 27\nassert abs(father_age - john_age) == 27, \"The positive difference between their ages is not 27.\"\n# Print John's father's age\nprint(f\"John's father's age: {father_age}\")"
